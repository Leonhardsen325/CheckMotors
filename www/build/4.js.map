{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACZ;AAUpC;IAAA;IAA8B,CAAC;IAAlB,eAAe;QAR3B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,yDAAS;aACV;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;aACpC;SACF,CAAC;OACW,eAAe,CAAG;IAAD,sBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZc;AAE1C,2GAA2G;AAC5B;AAK/E,8CAA8C;AACW;AAYzD;IAkBE,mBAAmB,OAAsB,EACtB,SAAoB,EACnB,IAAkB,EAClB,SAA0B,EAC3B,GAAQ;QAJR,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACnB,SAAI,GAAJ,IAAI,CAAc;QAClB,cAAS,GAAT,SAAS,CAAiB;QAC3B,QAAG,GAAH,GAAG,CAAK;QApB3B,gBAAW,GAAG;YACZ,wCAAwC;YACxC,wCAAwC;YACxC,wCAAwC;YACxC,wCAAwC;SACzC,CAAC;QAEK,SAAI,GAAG,EAAU,CAAC;QAEzB,WAAM,GAAI;YACR,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,EAAE;YACR,cAAc,EAAE,EAAE;YAClB,KAAK,EAAE,EAAE;SACV;QAQW,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;IAKD,iDAAiD;IACjD,yBAAK,GAAL,UAAM,KAAK,EAAE,OAAO;QAClB,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC7B,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,OAAO;YACjB,OAAO,EAAE,CAAC,QAAQ,CAAC;SACpB,CAAC,CAAC;QACH,EAAE,CAAC,OAAO,EAAE,CAAC;IACf,CAAC;IAED,mCAAe,GAAf;IAEA,CAAC;IAED,qCAAqC;IACrC,2DAA2D;IACrD,yBAAK,GAAX,UAAY,IAAU;;;;;;6BAGhB,KAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,GAA3C,wBAA2C;wBAC7C,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,uCAAuC,CAAC,CAAC;;;;wBAK3C,qBAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;;wBAApC,MAAM,GAAG,SAA2B;wBAC1C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACX,oDAAoD;4BACpD,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAC5C,CAAC;;;;wBAED,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,GAAC,CAAC,OAAO,CAAC,CAAC;;;;;;KAG5C;IAED,0BAAM,GAAN;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED,kCAAc,GAAd;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC1C,CAAC;IAID,kCAAc,GAAd;QACE,uEAAuE;QACvE,EAAE;IACJ,CAAC;IA/EU,SAAS;QAJrB,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;WACG;SAC1B,CAAC;6EAmByC;YACX,0EAAS;YACb,sEAAY;YACP,4DAAe;YACtB,GAAG;OAtBhB,SAAS,CAiFrB;IAAD,CAAC;AAAA;SAjFY,SAAS,e","file":"4.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { LoginPage } from './login';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(LoginPage),\r\n  ],\r\n})\r\nexport class LoginPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import { Component } from '@angular/core';\r\n\r\n// Nesse import adicionamos o AlertController que será usado para apresentar a mensagem do nosso aplicativo\r\nimport { IonicPage, NavController, NavParams, AlertController, App } from 'ionic-angular';\r\n\r\n// Importação do nosso modelo de usuário\r\nimport { User } from '../../models/user';\r\n\r\n// Importação do nosso serviço de autenticação\r\nimport { AuthProvider } from '../../providers/auth/auth';\r\nimport { convertUrlToSegments } from 'ionic-angular/umd/navigation/url-serializer';\r\n\r\n\r\n\r\n\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-login',\r\n  templateUrl: 'login.html',\r\n})\r\nexport class LoginPage {\r\n\r\n  backgrounds = [\r\n    'assets/img/background/background-1.jpg',\r\n    'assets/img/background/background-2.jpg',\r\n    'assets/img/background/background-3.jpg',\r\n    'assets/img/background/background-4.jpg'\r\n  ];\r\n\r\n  public user = {} as User;\r\n\r\n  google  = {\r\n    loggedin: false,\r\n    name: '',\r\n    profilePicture: '',\r\n    email: ''\r\n  }\r\n\r\n  constructor(public navCtrl: NavController,\r\n              public navParams: NavParams,\r\n              private auth: AuthProvider,\r\n              private alertCtrl: AlertController,\r\n              public app: App) {\r\n\r\n              console.log(auth.authenticated);\r\n  }\r\n\r\n  \r\n      \r\n\r\n  //Método para exibir as nossas mensagens de erro.\r\n  alert(title, message) {\r\n    let al = this.alertCtrl.create({\r\n      title: title,\r\n      subTitle: message,\r\n      buttons: ['Fechar']\r\n    });\r\n    al.present();\r\n  }\r\n  \r\n  loginWithGoogle() {\r\n    \r\n  }\r\n\r\n  // Método usado para login do usuário\r\n  //Receber como parametro um tipo user e tentar fazer login.\r\n  async login(user: User) {\r\n\r\n    //Valida se foi informado email e password\r\n    if (user.email == null || user.password == null) {\r\n      this.alert('Erro', 'É necessário informar o email e senha');\r\n    } else {\r\n      try {\r\n          \r\n        //Chamar o método para fazer login\r\n        const result = await this.auth.login(user);\r\n        if (result) {\r\n          //Se ocorrer tudo bem redirecionado para página Home\r\n          this.app.getRootNav().setRoot('HomePage');\r\n        }\r\n      } catch (e) {\r\n        this.alert('Erro ao logar', e.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  signup() {\r\n    this.navCtrl.push('SignupPage');\r\n  }\r\n\r\n  recuperarSenha() {\r\n    this.navCtrl.push('RecuperarSenhaPage');\r\n  }\r\n\r\n  \r\n\r\n  ionViewDidLoad() {\r\n    // Toda vez que um usuário acessar a página de login ele será deslogado\r\n    //\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}